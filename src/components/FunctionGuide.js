import { useState } from "react"
//--------------------------------------------------------//
import { tabActiveChk } from '../utils/_utilsBunddle'

export function FunctionGuide() {

  const [selected, setSelected] = useState('회원가입')
  const [guiedOpen, setGuideOpen] = useState('')

  const functionList = [
    {
      title: '회원가입',
      desc: [
        '필수항목을 모두 입력하고 동의항목을 모두 동의해야 가입이 가능합니다.',
        '항목별 입력값들이 모두 유효성 검사를 통과해야 가입이 가능합니다.',
        '단 선택사항인 항목은 미입력 시 유효성 검사를 진행하지 않습니다.(입력 시 유효성 검사 시작)'
      ]
    },
    {
      title: '로그인',
      desc: [
        '가입한 아이디와 비밀번호를 정확히 입력해야 로그인이 가능합니다.',
        'ID 저장을 체크하고 로그인을 하면 쿠키에 ID 정보가 저장되어 다음 접속 시에는 아이디 입력창에 이전 로그인 아이디값이 자동기입 됩니다.',
        'jwt 인증 방식이며, 엑세스 토큰의 유효시간은 1시간입니다. 다만 사이트 이용중에는 수시로 로그인 시간이 연장 됩니다.',
        '새로고침이나 브라우저 재접속 시에도 엑세스 토큰 유효시간이 남아있다면 로그인 상태로 접속 됩니다.'
      ]
    },
    {
      title: '이벤트종료',
      desc: [
        '기간이 만료된 이벤트는 진행이벤트 탭에서 종료이벤트 탭으로 자동 이동됩니다.'
      ]
    },
    {
      title: '페이지네이션',
      desc: [
        '일반적인 페이지네이션 기능입니다.'
      ]
    },
    {
      title: '최근본상품',
      desc: [
        '상품 디테일 페이지 접속 시 해당 상품이 최근본상품 목록에 추가됩니다.',
        '화면의 하단에 레이어팝업으로 최근본상품이 표시됩니다.',
        '로컬스토리지에만 기록되는 데이터입니다.',
        '최근본상품 페이지는 마이페이지 혹은 레이어팝업의 [최근본상품] 문자를 클릭하여 이동 가능합니다.',
        '최근본상품 페이지에서 보여주는 상품수는 최대 12개 입니다.'
      ]
    },
    {
      title: '좋아요',
      desc: [
        '로그인 후 이용 가능한 기능입니다.',
        '상품 디테일 페이지에서 좋아요를 클릭하면 상품 좋아요 수가 1 증가됩니다.',
        '상품 디테일 페이지에서 좋아요를 두번 클릭하면 상품 좋아요가 취소됩니다.',
        '좋아요를 누른 상품은 상품목록 페이지에서 보이는 좋아요 아이콘이 빨간 하트로 바뀝니다.',
        '마이페이지에서 좋아요 누른 상품들을 모아볼 수 있으며, 상품 상단의 X 클릭 시 해당 상품의 좋아요가 취소됩니다.'
      ]
    },
    {
      title: '장바구니',
      desc: [
        '상품 디테일 페이지에서 옵션과 수량을 선택해야 장바구니 담기가 가능합니다.',
        '담으려는 상품이 장바구니 안에 이미 존재한다면 수량만 추가 됩니다.',
        '장바구니 목록은 비로그인 상태일 시 로컬스토리지, 로그인 시 DB에 저장됩니다.',
        '로그인 시 비로그인 상태에서 장바구니에 담았던 상품들이 로그인 계정의 장바구니 목록에 합쳐지고, 로컬스토리지 장바구니 데이터는 초기화 됩니다.'
      ]
    },
    {
      title: '쿠폰적용',
      desc: [
        '로그인 시에만 쿠폰 사용이 가능합니다.',
        '장바구니 페이지와 결제 페이지에서 적용 가능합니다.',
        '1벌 금액을 기준으로 적용 됩니다.'
      ]
    },
    {
      title: '상품검색',
      desc: [
        '헤더의 검색창에 검색어를 입력하면 검색어가 포함되는 상품 목록이 표시 됩니다.',
        '검색결과 내에서도 카테고리 선택과 가격필터, 상품정렬 기능 모두 사용 가능합니다.'
      ]
    },
    {
      title: '상품정렬 ',
      desc: [
        '일반적인 상품 정렬 기능 입니다.',
        '인기순은 상품의 좋아요 순으로 정렬 됩니다.'
      ]
    },
    {
      title: '상품금액필터',
      desc: [
        '표시할 상품의 가격범위를 지정할 수 있습니다.',
        '[직접입력] 선택 시 기본 범위는 <0원~표시목록의 최대금액> 로 적용됩니다.',
        '페이지의 카테고리가 바뀌면 [직접입력] 범위값이 초기화 됩니다.'
      ]
    },
    {
      title: '게시판CRUD',
      desc: [
        '로그인 후 이용 가능한 기능입니다.',
        '문의접수 탭에서 글을 작성하면 문의내역 탭에 게시물이 등록됩니다.',
        '문의내역 탭에서 게시물 제목을 클릭하면 해당 게시물의 상세내용이 표시됩니다.',
        '상세내용 창에서 수정버튼을 클릭하면 수정이 가능합니다.',
        '상세내용 창에서 삭제버튼을 클릭하면 글이 삭제됩니다.'
      ]
    }
  ]

  return (
    <>
      <aside className={`function-guied-wrap ${guiedOpen}`}>
        <button className="button-close" onClick={() => { setGuideOpen('hide') }}></button>
        <header>
          <h1>기능구현 목록 및 설명</h1>
          <span>*데이터의 모든 변경사항은 DB에 저장되어<br />새로고침, 브라우저 종료와 관계없이 영구적으로 유지됩니다.</span>
        </header>
        <ul className='function-list'>
          {
            functionList.map((el, idx) => {
              return (
                <li
                  key={idx}
                  className={'function-type ' + tabActiveChk(selected, el.title)}
                  onClick={() => {
                    setSelected(el.title)
                  }}>
                  {el.title}
                </li>
              )
            })
          }
        </ul>
        <div>
          <dl>
            {
              functionList.map((el) => {
                if (el.title === selected) {
                  return el.desc.map((el2, idx) => {
                    return (
                      <dd key={idx} className='function-desc'>
                        {el2}
                      </dd>
                    )
                  })
                }
              })
            }
          </dl>
        </div>
      </aside>
      <aside className="function-guied-icon" onClick={() => { setGuideOpen('') }}>
        <img src={require('../assets/img/ic_function_guide.png')}></img>
      </aside>
    </>
  )
}